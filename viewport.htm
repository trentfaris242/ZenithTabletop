<!DOCTYPE html>
<html lang="en-US">
<head>

<title>Zenith Tabletop</title>

<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
<link rel="stylesheet" href="/resources/css/viewport.css">

</head>

<body onload="viewport()">
			
	<canvas id="viewport">Your browser doesn't appear to support the <code>&lt;canvas&gt;</code> element.</canvas>
	<div class="viewport-instructions">
	
		<span style="font-weight: bold;">Note: </span>This WebGL experiment is optimized for Chrome 4.0, Internet Explorer 11.0, Edge 12.0, Mozilla Firefox 3.0, Safari 6.0, and Opera 11.0 and later versions of these browsers. Some features of this experiment may not be available on all browsers, such as the Pointer Lock API.<br />
		<br />
		To control the camera, use W, A, S, and D to move forwards and backwards and strafe left and right.<br />
		<br />
		Click on the Viewport to activate the Pointer Lock API. This will hide your cursor and allow you to freely rotate the camera with mouse movements. To exit this mode, click ESC. If you do not have access to this API, click and drag your mouse to rotate the camera.<br />
		<br />
		Hold the right mouse button to zoom in.
		
	</div>
	<div class="viewport-data">
	
		FPS: <span id="fps">0</span><br />
		X: <span id="x">0</span><br />
		Y: <span id="y">0</span><br />
		Z: <span id="z">0</span>
	
	</div>
			
	<script type="text/javascript" src="//code.jquery.com/jquery-2.1.4.min.js"></script>
	<script type="text/javascript" src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
	<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
	
	<script type="text/javascript" src="/resources/scripts/viewport/camera/camera.js"></script>
	<script type="text/javascript" src="/resources/scripts/viewport/input/input.js"></script>
	<script type="text/javascript" src="/resources/scripts/viewport/light/directionalLight.js"></script>
	<script type="text/javascript" src="/resources/scripts/viewport/object/material.js"></script>
	<script type="text/javascript" src="/resources/scripts/viewport/object/mesh.js"></script>
	<script type="text/javascript" src="/resources/scripts/viewport/object/model.js"></script>
	<script type="text/javascript" src="/resources/scripts/viewport/object/object.js"></script>
	<script type="text/javascript" src="/resources/scripts/viewport/render/render.js"></script>
	<script type="text/javascript" src="/resources/scripts/viewport/shader/shader.js"></script>
	<script type="text/javascript" src="/resources/scripts/viewport/util/gl-matrix.js"></script>
	<script type="text/javascript" src="/resources/scripts/viewport/util/webgl-utils.js"></script>
	<script type="text/javascript" src="/resources/scripts/viewport/viewport.js"></script>
	<script type="text/javascript" src="/resources/scripts/viewport/world/world.js"></script>
	
	<script id="shader-vs" type="x-shader/x-vertex">
		attribute highp vec3 posVertex;
		attribute highp vec2 uvVertex;
		attribute highp vec3 normalVertex;
		
		uniform highp mat4 mvp;
		uniform highp mat4 model;
		uniform highp mat3 normal;
		
		varying highp vec3 posFrag;
		varying highp vec2 uvFrag;
		varying highp vec3 normalFrag;
			
		void main() {
			gl_Position = mvp * vec4(posVertex, 1.0);
			
			posFrag = vec3(model * vec4(posVertex, 1.0));
			
			uvFrag = uvVertex;
			
			normalFrag = normal * normalVertex;
		}
	</script>
	<script id="shader-fs" type="x-shader/x-fragment">
		struct Material {
			highp vec3 diffuse;
			highp vec3 specular;
			highp float shininess;
		};
		
		struct DirectionalLight {
			highp vec3 direction;
			highp vec3 ambient;
			highp vec3 diffuse;
			highp vec3 specular;
		};
		
		varying highp vec3 posFrag;
		varying highp vec2 uvFrag;
		varying highp vec3 normalFrag;
		
		uniform Material material;
		uniform DirectionalLight directionalLight;
		uniform highp vec3 viewPosition;
		
		void main() {
			highp vec3 normal = normalize(normalFrag);
			highp vec3 viewDirection = normalize(viewPosition - posFrag);
			
			highp vec3 lightDirection = normalize(-directionalLight.direction);
			highp vec3 halfwayDirection = normalize(lightDirection + viewDirection);
			
			highp float diff = max(dot(normal, lightDirection), 0.0);
			highp float spec = max(dot(normal, halfwayDirection), 0.0);
			spec = pow(spec, material.shininess);
			
			highp vec3 ambient = directionalLight.ambient * material.diffuse;
			highp vec3 diffuse = directionalLight.diffuse * diff * material.diffuse;
			highp vec3 specular = directionalLight.specular * spec * material.specular;
			
			highp vec3 result = ambient + diffuse + specular;
			
			gl_FragColor = vec4(result, 1.0);
		}
	</script>

</body>

</html>